Usage: faust2api [options] [Faust options] <file.dsp>
faust2api can be used to generate Faust based dsp objects for various platforms:

Ouput options:
   -ios : generates an iOS API
   -android : generates an Android API
   -coreaudio : generates an OSX CoreAudio API
   -alsa : generates an ALSA API
   -jack : generates a JACK API
   -portaudio : generates a PortAudio API
   -rtaudio : generates an RTAudio API
   -of : generates an openFrameworks API
   -juce : generates a JUCE API
   -dummy : generates a dummy audio API
   -teensy : generates a Teensy API
   -esp32 : generates a ESP32 API

Global options:
   -opt native|generic : activates the best compilation options for the native or generic CPU.
   -nvoices <num> : creates a polyphonic object with <num> voices.
   -effect <effect.dsp> : adds an effect to the polyphonic synth (ignored if -nvoices is not specified).
   -effect auto : adds an effect (extracted automatically from the dsp file) to the polyphonic synth (ignored if -nvoices is not specified).
   -nodoc : prevents documentation from being generated.
   -nozip : prevents generated files to be put in a zip file.
   -target <target> : sets a name of the target folder or the zip file. Defaults to "dsp-faust"
   Faust options : any option (e.g. -vec -vs 8...). See the Faust compiler documentation.

Android specific options:
   -package : set the JAVA package name (e.g. '-package mypackage' will change the JAVA package name to 'mypackage.DspFaust'). The default package name is 'com.DspFaust.'
   -soundfile : add built-in Soundfile support to the API.

Options supported by iOS, CoreAudio, ALSA, JACK, PortAudio, openFrameworks and JUCE
   -midi : add built-in RtMidi support to the API.
   -osc : add built-in OSC support to the API.
   -soundfile : add built-in Soundfile support to the API.

JACK specific options
   -build : build a ready to test binary.
   -dynamic : add libfaust/LLVM dynamic DSP compilation mode.
